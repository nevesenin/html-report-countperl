#!/usr/bin/env perl

use strict;
use warnings;
use Carp qw();
use Perl::Metrics::Simple qw(0.13);

my $COMPLEXITY_LEVEL_THRESHOLD = {
    BTW => 10,
    WTF => 20,
    OMG => 30,
};

my $THRESHOLD_TO_CSS_CLASS = {
    0                                  => 'fyi',
    $COMPLEXITY_LEVEL_THRESHOLD->{BTW} => 'btw',
    $COMPLEXITY_LEVEL_THRESHOLD->{WTF} => 'wtf',
    $COMPLEXITY_LEVEL_THRESHOLD->{OMG} => 'omg',
};

my $CSS = {
    body  => ['font-family:sans-serif;'],
    table => [ 'border-collapse:collapse;', 'border-spacing:0px;', 'margin:10px 0px;' ],
    tr       => [ 'text-align:left;',          'vertical-align:top;' ],
    'td, th' => [ 'border:solid 1px #000000;', 'padding:2px;' ],
    th       => ['background-color:#cccccc;'],
    '.fyi'   => ['background-color:#99ff99;'],
    '.btw'   => ['background-color:#ffff99;'],
    '.wtf'   => ['background-color:#ffcc99;'],
    '.omg'   => ['background-color:#ff9999;'],
    '.w300'  => ['width:300px;'],
    '.w200'  => ['width:200px;'],
    '.w100'  => ['width:100px;'],
    '.right' => ['text-align:right;']
};

my $ANALYSIS;
my $HTML_OUTPUT = 0;
my @FILES       = ();

main();

sub main {
    parse_opts();

    set_analysis();

    if ( $HTML_OUTPUT ) {
        print_html();
    }
    else {
        print_plain();
    }
}

sub parse_opts {
    unless ( scalar( @ARGV ) ) {
        print_usage();

        exit;
    }

    foreach ( @ARGV ) {
        if ( $_ eq '--html' ) {
            $HTML_OUTPUT = 1;
        }
        else {
            push( @FILES, $_ );
        }
    }
}

sub print_usage {
    print <<'EOU';
Usage:
    $0 FILE_OR_DIRECTORY [FILE_OR_DIRECTORY ....]
EOU
}

sub set_analysis {
    $ANALYSIS = Perl::Metrics::Simple->new()->analyze_files( @FILES );
}

sub _sort_by_complexity {
    return $b->{mccabe_complexity} <=> $a->{mccabe_complexity};
}

### PLAIN

sub print_plain {
    print 'Perl files found: ' . $ANALYSIS->file_count() . "\n\n";

    print_counts_plain();
    print_subroutine_size_plain();
    print_code_complexity_plain();
    print_list_of_subs_plain();
}

sub print_counts_plain {
    print_headline_plain( 'Counts' );

    print_line_plain( 'total code lines',      $ANALYSIS->lines() );
    print_line_plain( 'lines of non-sub code', $ANALYSIS->main_stats()->{lines} );
    print_line_plain( 'packages found',        $ANALYSIS->package_count() );
    print_line_plain( 'subs/methods',          $ANALYSIS->sub_count() );

    print "\n\n";
}

sub print_line_plain {
    my ( $key, $value ) = @_;

    print $key . ':';
    print ' ' x ( 25 - length( $key ) );
    print $value . "\n";
}

sub print_headline_plain {
    my ( $headline ) = @_;

    print $headline . "\n";
    print '-' x length( $headline );
    print "\n";
}

sub print_subroutine_size_plain {
    print_headline_plain( 'Subroutine/Method Size' );

    print_line_plain( 'min',            $ANALYSIS->summary_stats()->{sub_length}->{min} );
    print_line_plain( 'max',            $ANALYSIS->summary_stats()->{sub_length}->{max} );
    print_line_plain( 'mean',           $ANALYSIS->summary_stats()->{sub_length}->{mean} );
    print_line_plain( 'std. deviation', $ANALYSIS->summary_stats()->{sub_length}->{standard_deviation} );
    print_line_plain( 'median',         $ANALYSIS->summary_stats()->{sub_length}->{median} );

    print "\n\n";
}

sub print_code_complexity_plain {
    print_headline_plain( 'McCabe Complexity' );

    print_complexity_section_plain( 'Code not in any subroutine', 'main_complexity' );
    print "\n";
    print_complexity_section_plain( 'Subroutines/Methods',        'sub_complexity' );

    print "\n\n";
}

sub print_complexity_section_plain {
    my ( $section, $key ) = @_;

    print $section . "\n";

    print_line_plain( 'min',            $ANALYSIS->summary_stats()->{$key}->{min} );
    print_line_plain( 'max',            $ANALYSIS->summary_stats()->{$key}->{max} );
    print_line_plain( 'mean',           $ANALYSIS->summary_stats()->{$key}->{mean} );
    print_line_plain( 'std. deviation', $ANALYSIS->summary_stats()->{$key}->{standard_deviation} );
    print_line_plain( 'median',         $ANALYSIS->summary_stats()->{$key}->{median} );
}

sub print_list_of_subs_plain {
    my @main_from_each_file = map { $_->{main_stats} } @{ $ANALYSIS->file_stats() };
    my @sorted_subs = sort _sort_by_complexity(), ( @{ $ANALYSIS->subs() }, @main_from_each_file );

    my $column_widths = get_column_widths( @main_from_each_file );

    print_headline_plain( 'List of subroutines, with most complex at top' );

    print_column( 'complexity', $column_widths->{mccabe_complexity} );
    print_column( 'sub',        $column_widths->{name} );
    print_column( 'path',       $column_widths->{path} );
    print_column( 'size',       $column_widths->{lines} );
    print "\n";

    foreach my $sub ( @sorted_subs ) {
        print_list_of_subs_line_plain( $sub, $column_widths );
    }

    print "\n\n";
}

sub print_list_of_subs_line_plain {
    my ( $sub, $column_widths ) = @_;

    foreach my $col ( 'mccabe_complexity', 'name', 'path', 'lines' ) {
        print_column( $sub->{$col}, $column_widths->{$col} );
    }

    print "\n";
}

sub print_column {
    my ( $value, $width ) = @_;

    print $value;
    print ' ' x ( $width - length( $value ) + 2 );
}

sub get_column_widths {
    my @main_from_each_file = @_;

    my $column_widths = {
        mccabe_complexity => 10,
        name              => 3,
        path              => 4,
        lines             => 4,
    };

    foreach my $sub ( @main_from_each_file ) {
        foreach my $col ( 'mccabe_complexity', 'name', 'path', 'lines' ) {
            $column_widths->{$col} = length( $sub->{$col} ) if ( length( $sub->{$col} ) > $column_widths->{$col} );
        }
    }

    return $column_widths;
}

### /PLAIN
### HTML

sub print_html {
    print '<!DOCTYPE html><html lang="en">';

    print_head();

    print_body();

    print '</html>';
}

sub print_head {
    print '<head><title>countperl</title><meta charset="utf-8">';

    print_css();

    print '</head>';
}

sub print_css {
    print '<style type="text/css">';

    foreach my $selector ( keys( %$CSS ) ) {
        print $selector . '{';

        foreach ( @{ $CSS->{$selector} } ) {
            print $_;
        }

        print '}';
    }

    print '</style>';
}

sub print_body {
    print '<body><h3>';
    print 'Perl files found ' . $ANALYSIS->file_count();
    print '</h3>';

    print_counts_html();
    print_subroutine_size_html();
    print_code_complexity_html();
    print_list_of_subs_html();
    print_complexity_levels();

    print '</body>';
}

sub print_counts_html {
    print '<table><tr><th colspan="2">Counts</th></tr>';

    print_tr( 'total code lines',      $ANALYSIS->lines() );
    print_tr( 'lines of non-sub code', $ANALYSIS->main_stats()->{lines} );
    print_tr( 'packages found',        $ANALYSIS->package_count() );
    print_tr( 'subs/methods',          $ANALYSIS->sub_count() );

    print '</table>';
}

sub print_tr {
    my ( $key, $value, $css ) = @_;
    $css = $css ? ' ' . $css : '';

    print '<tr><td class="w200">';
    print $key;
    print '</td><td class="w100 right' . $css . '">';
    print $value;
    print '</td></tr>';
}

sub print_subroutine_size_html {
    print '<table><tr><th colspan="2">Subroutine/Method Size</th></tr>';

    print_tr( 'min',            $ANALYSIS->summary_stats()->{sub_length}->{min} );
    print_tr( 'max',            $ANALYSIS->summary_stats()->{sub_length}->{max} );
    print_tr( 'mean',           $ANALYSIS->summary_stats()->{sub_length}->{mean} );
    print_tr( 'std. deviation', $ANALYSIS->summary_stats()->{sub_length}->{standard_deviation} );
    print_tr( 'median',         $ANALYSIS->summary_stats()->{sub_length}->{median} );

    print '</table>';
}

sub print_code_complexity_html {
    print '<table><tr><th colspan="3">McCabe Complexity</th></tr>';

    print_complexity_section_html( 'Code not in any subroutine', 'main_complexity' );
    print_complexity_section_html( 'Subroutines/Methods',        'sub_complexity' );

    print '</table>';
}

sub print_complexity_section_html {
    my ( $section, $key ) = @_;

    print '<tr><td rowspan="5" class="w200">' . $section . '</td>';

    print '<td class="w200">min</td><td class="w100 right ' . get_class_by_count( $ANALYSIS->summary_stats()->{$key}->{min} ) . '">';
    print $ANALYSIS->summary_stats()->{$key}->{min};
    print '</td></tr>';

    print_tr( 'max',  $ANALYSIS->summary_stats()->{$key}->{max},  get_class_by_count( $ANALYSIS->summary_stats()->{$key}->{max} ) );
    print_tr( 'mean', $ANALYSIS->summary_stats()->{$key}->{mean}, get_class_by_count( $ANALYSIS->summary_stats()->{$key}->{mean} ) );
    print_tr(
        'std. deviation',
        $ANALYSIS->summary_stats()->{$key}->{standard_deviation},
        get_class_by_count( $ANALYSIS->summary_stats()->{$key}->{standard_deviation} )
    );
    print_tr( 'median', $ANALYSIS->summary_stats()->{$key}->{median}, get_class_by_count( $ANALYSIS->summary_stats()->{$key}->{median} ) );
}

sub print_list_of_subs_tr {
    my ( $sub ) = @_;

    print '<tr><td class="'
        . get_class_by_count( $sub->{mccabe_complexity} )
        . ' right">'
        . $sub->{mccabe_complexity}
        . '</td><td>'
        . $sub->{name}
        . '</td><td>'
        . $sub->{path}
        . '</td><td class="right">'
        . $sub->{lines}
        . '</td></tr>';
}

sub print_list_of_subs_html {
    my @main_from_each_file = map { $_->{main_stats} } @{ $ANALYSIS->file_stats() };
    my @sorted_subs = sort _sort_by_complexity(), ( @{ $ANALYSIS->subs() }, @main_from_each_file );

    print '<table><tr><th colspan="4">List of subroutines, with most complex at top</th></tr>'
        . '<tr><td class="w100">complexity</td><td>sub</td><td>path</td><td class="w100">size</td><tr>';

    foreach my $sub ( @sorted_subs ) {
        print_list_of_subs_tr( $sub );
    }

    print '</table>';
}

sub print_complexity_levels {
    print '<table><tr><th colspan="2">Complexity Levels</th></tr>';

    foreach my $level ( sort( keys( %$THRESHOLD_TO_CSS_CLASS ) ) ) {
        print '<tr><td class="'
            . $THRESHOLD_TO_CSS_CLASS->{$level} . '">'
            . $THRESHOLD_TO_CSS_CLASS->{$level}
            . '</td><td class="'
            . $THRESHOLD_TO_CSS_CLASS->{$level} . '">'
            . '&gt;= '
            . $level
            . '</td></tr>';
    }

    print '</table>';
}

sub get_class_by_count {
    my ( $count ) = @_;

    my @level = reverse( sort( keys( %$THRESHOLD_TO_CSS_CLASS ) ) );

    foreach ( @level ) {
        return $THRESHOLD_TO_CSS_CLASS->{$_} if ( $count >= $_ );
    }
}

### /HTML

exit;
