#!/usr/bin/env perl

use strict;
use warnings;
use Carp qw();
use Perl::Metrics::Simple qw(0.13);

our $VERSION = 0.15;

my $COMPLEXITY_LEVEL_THRESHOLD = {
    BTW => 10,
    WTF => 20,
    OMG => 30,
};

my $THRESHOLD_TO_CSS_CLASS = {
    0                                  => 'fyi',
    $COMPLEXITY_LEVEL_THRESHOLD->{BTW} => 'btw',
    $COMPLEXITY_LEVEL_THRESHOLD->{WTF} => 'wtf',
    $COMPLEXITY_LEVEL_THRESHOLD->{OMG} => 'omg',
};

my $CSS = {
    body  => ['font-family:sans-serif;'],
    table => [ 'border-collapse:collapse;', 'border-spacing:0px;', 'margin:10px 0px;' ],
    tr       => [ 'text-align:left;',          'vertical-align:top;' ],
    'td, th' => [ 'border:solid 1px #000000;', 'padding:2px;' ],
    th       => ['background-color:#cccccc;'],
    '.fyi'   => ['background-color:#99ff99;'],
    '.btw'   => ['background-color:#ffff99;'],
    '.wtf'   => ['background-color:#ffcc99;'],
    '.omg'   => ['background-color:#ff9999;'],
    '.w300'  => ['width:300px;'],
    '.w200'  => ['width:200px;'],
    '.w100'  => ['width:100px;'],
    '.right' => ['text-align:right;']
};

my $ANALYSIS;

main();

sub main {
    unless ( scalar( @ARGV ) ) {
        print_usage();

        exit;
    }

    set_analysis();

    print_html();
}

sub set_analysis {
    $ANALYSIS = Perl::Metrics::Simple->new()->analyze_files( @ARGV );
}

sub print_html {
    print '<!DOCTYPE html><html lang="de">';

    print_head();

    print_body();

    print '</html>';
}

sub print_head {
    print '<head><title>countperl</title>';

    print_css();

    print '</head>';
}

sub print_css {
    print '<style type="text/css">';

    foreach my $selector ( keys( %$CSS ) ) {
        print $selector . '{';

        foreach ( @{ $CSS->{$selector} } ) {
            print $_;
        }

        print '}';
    }

    print '</style>';
}

sub print_usage {
    print <<'EOU';
Usage:
    $0 FILE_OR_DIRECTORY [FILE_OR_DIRECTORY ....]
EOU
}

sub print_body {
    print '<body><h3>Perl files found ' . $ANALYSIS->file_count() . '</h3>';

    print_counts();
    print_subroutine_size();
    print_code_complexity();
    print_list_of_subs();
    print_complexity_levels();

    print '</body>';
}

sub print_counts {
    print '<table><tr><th colspan="2">Counts</th></tr>'
        . '<tr><td class="w200">total code lines</td><td class="w100 right">'
        . $ANALYSIS->lines()
        . '</td></tr>'
        . '<tr><td>lines of non-sub code</td><td class="right">'
        . $ANALYSIS->main_stats()->{lines}
        . '</td></tr>'
        . '<tr><td>packages found</td><td class="right">'
        . $ANALYSIS->package_count()
        . '</td></tr>'
        . '<tr><td>subs/methods</td><td class="right">'
        . $ANALYSIS->sub_count()
        . '</td></tr>'
        . '</table>';
}

sub print_subroutine_size {
    print '<table><tr><th colspan="2">Subroutine/Method Size</th></tr>'
        . '<tr><td class="w200">min</td><td class="w100 right">'
        . $ANALYSIS->summary_stats()->{sub_length}->{min}
        . '</td></tr>'
        . '<tr><td>max</td><td class="right">'
        . $ANALYSIS->summary_stats()->{sub_length}->{max}
        . '</td></tr>'
        . '<tr><td>mean</td><td class="right">'
        . $ANALYSIS->summary_stats()->{sub_length}->{mean}
        . '</td></tr>'
        . '<tr><td>std. deviation</td><td class="right">'
        . $ANALYSIS->summary_stats()->{sub_length}->{standard_deviation}
        . '</td></tr>'
        . '<tr><td>median</td><td class="right">'
        . $ANALYSIS->summary_stats()->{sub_length}->{median}
        . '</td></tr>'
        . '</table>';
}

sub print_code_complexity {
    print '<table><tr><th colspan="3">McCabe Complexity</th></tr>';

    print_complexity_section( 'Code not in any subroutine', 'main_complexity' );
    print_complexity_section( 'Subroutines/Methods',        'sub_complexity' );

    print '</table>';
}

sub print_complexity_section {
    my ( $section, $key ) = @_;

    print '<tr><td rowspan="5" class="w200">'
        . $section . '</td>'
        . '<td class="w200">min</td><td class="w100 right '
        . get_class_by_count( $ANALYSIS->summary_stats()->{$key}->{min} ) . '">'
        . $ANALYSIS->summary_stats()->{$key}->{min}
        . '</td></tr>'
        . '<tr><td>max</td><td class="right '
        . get_class_by_count( $ANALYSIS->summary_stats()->{$key}->{max} ) . '">'
        . $ANALYSIS->summary_stats()->{$key}->{max}
        . '</td></tr>'
        . '<tr><td>mean</td><td class="right">'
        . $ANALYSIS->summary_stats()->{$key}->{mean}
        . '</td></tr>'
        . '<tr><td>std. deviation</td><td class="right">'
        . $ANALYSIS->summary_stats()->{$key}->{standard_deviation}
        . '</td></tr>'
        . '<tr><td>median</td><td class="right">'
        . $ANALYSIS->summary_stats()->{$key}->{median}
        . '</td></tr>';
}

sub print_list_of_subs {
    my @main_from_each_file = map { $_->{main_stats} } @{ $ANALYSIS->file_stats() };
    my @sorted_subs = sort _sort_by_complexity(), ( @{ $ANALYSIS->subs() }, @main_from_each_file );

    print '<table><tr><th colspan="4">List of subroutines, with most complex at top</th></tr>'
        . '<tr><td class="w100">complexity</td><td>sub</td><td>path</td><td class="w100">size</td><tr>';

    foreach my $sub ( @sorted_subs ) {
        print '<tr><td class="'
            . get_class_by_count( $sub->{mccabe_complexity} )
            . ' right">'
            . $sub->{mccabe_complexity}
            . '</td><td>'
            . $sub->{name}
            . '</td><td>'
            . $sub->{path}
            . '</td><td class="right">'
            . $sub->{lines}
            . '</td></tr>';
    }

    print '</table>';
}

sub print_complexity_levels {
    print '<table><tr><th colspan="2">Complexity Levels</th></tr>';

    foreach my $level ( sort( keys( %$THRESHOLD_TO_CSS_CLASS ) ) ) {
        print '<tr><td class="'
            . $THRESHOLD_TO_CSS_CLASS->{$level} . '">'
            . $THRESHOLD_TO_CSS_CLASS->{$level}
            . '</td><td class="'
            . $THRESHOLD_TO_CSS_CLASS->{$level} . '">'
            . '&gt;= '
            . $level
            . '</td></tr>';
    }

    print '</table>';
}

sub get_class_by_count {
    my ( $count ) = @_;

    my @level = reverse( sort( keys( %$THRESHOLD_TO_CSS_CLASS ) ) );

    foreach ( @level ) {
        return $THRESHOLD_TO_CSS_CLASS->{$_} if ( $count >= $_ );
    }
}

sub _sort_by_complexity {
    return $b->{mccabe_complexity} <=> $a->{mccabe_complexity};
}

exit;
